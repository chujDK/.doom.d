:PROPERTIES:
#+LATEX_COMPILER: xelatex
#+LATEX_CLASS: elegentpaper
#+OPTIONS: prop:t
:END:
#+title: Doom Emacs literal configuration
#+author: chuj

* Table of Contents :TOC:noexport:
- [[#misc][Misc]]
  - [[#lexical-binding][Lexical-binding]]
  - [[#user-info][User info]]
  - [[#keyfreq-blacklist][Keyfreq blacklist]]
  - [[#not-tab][Not tab]]
  - [[#encoding][Encoding]]
  - [[#load-path][Load path]]
- [[#theme][Theme]]
  - [[#main-theme][Main Theme]]
  - [[#font][Font]]
  - [[#line-number][Line Number]]
  - [[#ruler][Ruler]]
  - [[#ident-guide][Ident guide]]
  - [[#custom-set-face][Custom set face]]
  - [[#full-screen][Full screen]]
  - [[#mode-line][Mode line]]
- [[#global-enable-mode][Global enable mode]]
- [[#programming][Programming]]
  - [[#prog-mode-hook][prog-mode hook]]
  - [[#syntax-highlight][Syntax highlight]]
  - [[#lsp][Lsp]]
  - [[#cc][C/C++]]
  - [[#rust][Rust]]
- [[#org-mode][Org-mode]]
  - [[#general][General]]
  - [[#storage][Storage]]
  - [[#latex][Latex]]
  - [[#for-export][For export]]
- [[#key-bindings][Key bindings]]
- [[#other][Other]]
  - [[#wsl-setup--chinese-input][WSL setup && Chinese input]]
  - [[#profile-startup][Profile startup]]

* Misc
** Lexical-binding
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
** User info
Some functionality uses this to identify you, e.g. GOG configuration, email clients, file templates and snippets. It is optional.
#+begin_src elisp
(setq user-full-name "chuj"
      user-mail-address "1768485949@qq.com")
#+end_src
** Keyfreq blacklist
#+begin_src emacs-lisp
(setq keyfreq-excluded-commands
      '(self-insert-command
        forward-char
        backward-char
        previous-line
        next-line
        evil-previous-line
        evil-next-line
        evil-backward-char
        evil-forward-char
        evil-force-normal-state
        evil-insert
        term-send-raw
        org-self-insert-command
        vterm--self-insert
        evil-normal-state
        exit-minibuffer
        vertico-next ; vertico candidate chose
        mwheel-scroll
        ))
#+end_src
** Not tab
don't use tab
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
#+end_src
** Encoding
让所有的编码都变成 UTF-8
#+begin_src emacs-lisp
(set-language-environment               "UTF-8")     ;; System default coding
(prefer-coding-system                   'utf-8)      ;; prefer
(set-buffer-file-coding-system          'utf-8-unix) ;;
(set-charset-priority                   'unicode)    ;;
(set-clipboard-coding-system            'utf-8-unix) ;; clipboard
(set-default-coding-systems             'utf-8)      ;; buffer/file: 打开文件时的默认编码
(set-file-name-coding-system            'utf-8-unix) ;; unix/linux/macos
(set-keyboard-coding-system             'utf-8-unix) ;; keyboard
(set-next-selection-coding-system       'utf-8-unix) ;; selection
(set-selection-coding-system            'utf-8)      ;; selection
(set-terminal-coding-system             'utf-8-unix) ;; terminal
(setq coding-system-for-read            'utf-8)      ;;
(setq default-buffer-file-coding-system 'utf-8)      ;;
(setq locale-coding-system              'utf-8)      ;; local
#+end_src
** Load path
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.doom.d/lisp")
#+end_src
* Theme
** Main Theme
use doom-dark + theme (a vs-code like dark theme), and use a blue modeline
+stick to doom one+
#+begin_src emacs-lisp
(setq doom-theme 'doom-dark+
      doom-dark+-blue-modeline t)
#+end_src
** Font
使用 JetBrains Mono 字体作为等宽字体

非等宽字体使用 Myriad Pro

unicode 字体使用 /我在这里下载的[[https://github.com/samuelngs/apple-emoji-linux][Apple Color Emoji]]/
#+begin_src emacs-lisp
;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 20
                           :weight 'normal)
      doom-variable-pitch-font (font-spec :family "Myriad Pro" :size 26)
      doom-unicode-font (font-spec :family "Apple Color Emoji" :size 20))

;(set-fontset-font "fontset-default" 'han '("LiHeiPro" . "ttf"))
#+end_src
** Line Number
This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src
** Ruler
a 80 ruler
#+begin_src emacs-lisp
(setq display-fill-column-indicator-column 80)
;; we don't want a ruler in shell right? so only in prog mode
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src
** Ident guide
#+begin_src emacs-lisp
;; better indent guide
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(setq-default highlight-indent-guides-method 'character)
#+end_src
** Custom set face
#+begin_src emacs-lisp
;;; custom set face
(custom-set-faces
;  '(rainbow-delimiters-depth-1-face
;    ((t (:inherit rainbow-delimiters-base-face :foreground "gold"))))
;  '(rainbow-delimiters-depth-2-face
;    ((t (:inherit rainbow-delimiters-base-face :foreground "LightGreen"))))
;  '(rainbow-delimiters-depth-3-face
;    ((t (:inherit rainbow-delimiters-base-face :foreground "magenta1"))))
  '(rainbow-delimiters-depth-3-face
    ((t (:inherit rainbow-delimiters-base-face :foreground "LightGreen"))))
  '(rainbow-delimiters-depth-4-face
    ((t (:inherit rainbow-delimiters-base-face :foreground "gold"))))
  '(lsp-face-semhl-interface
    ((t (:inherit font-lock-variable-name-face))))
;  '(rainbow-delimiters-depth-4-face
;    ((t (:inherit rainbow-delimiters-base-face :foreground "beige"))))
  '(mode-line ((t (:family "Noto Sans" :height 0.9))))
  '(mode-line-active ((t (:family "Noto Sans" :height 0.9)))) ; For 29+
  '(mode-line-inactive ((t (:family "Noto Sans" :height 0.9))))
  ;; i decide to not enable whitespace mode by default
  ; set tab to the background color
;  '(whitespace-tab ((t (:background "1e1e1e"))))
; (face-attribute 'default :background) => 1e1e1e
  )
#+end_src
** Full screen
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src
** Mode line
#+begin_src elisp
(setq doom-modeline-highlight-modified-buffer-name t)
(setq doom-modeline-major-mode-color-icon t)
(setq doom-modeline-indent-info t)
;; used for modeline's font, see custom set face
(setq doom-modeline-height 1)
#+end_src
* Global enable mode
#+begin_src emacs-lisp
(global-display-line-numbers-mode)
(global-tree-sitter-mode) ;; only in the mode, won't highlight
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)
;; always enable wakatime
(global-wakatime-mode t)
#+end_src

* Programming
** prog-mode hook
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook
          (lambda ()
            (rainbow-delimiters-mode)
            ;; buffer-face
            ;; set the foreground color
;            (setq buffer-face-mode-face '(:foreground "#85ddff"))
;            (buffer-face-mode)
            ))
#+end_src
** Syntax highlight
*** tree-sitter
always enable tree-sitter
#+begin_src emacs-lisp
(add-hook 'go-mode-hook #'tree-sitter-hl-mode)
#+end_src
** Lsp
set lsp-idle-delay from 0.5 to 0.35 to make it looks faster
#+begin_src emacs-lisp
(setq lsp-idle-delay 0.35)
(setq lsp-semantic-tokens-honor-refresh-requests t); always auto refresh
#+end_src
** C/C++
*** lsp
#+begin_src emacs-lisp
(setq lsp-clients-clangd-args '("-j=8"
                                "--background-index"
                                "--clang-tidy"
                                "--completion-style=detailed"
                                "--header-insertion=never"
                                "--header-insertion-decorators=0"))

(after! lsp-clangd (set-lsp-priority! 'clangd 2))

(defun c-mode-lsp-setup ()
  (setq tree-sitter-mode nil)
  (setq lsp-semantic-tokens-enable t)
  )

(add-hook 'c-mode-common-hook 'c-mode-lsp-setup)
#+end_src
*** format
#+begin_src emacs-lisp
;; google c style
(add-hook 'c-mode-common-hook 'google-set-c-style)
#+end_src
** Rust
*** lsp
#+begin_src emacs-lisp
(defun rust-mode-lsp-setup ()
  (setq tree-sitter-mode nil)
  (setq lsp-semantic-tokens-enable t)
  (setq lsp-rust-analyzer-server-display-inlay-hints t)
  )
;
(add-hook 'rust-mode-hook 'rust-mode-lsp-setup)
#+end_src
* Org-mode
** General
#+begin_src emacs-lisp
(after! org
  ;;; org-journal
  (setq org-journal-file-format "%Y%m%d.org")
  (setq org-journal-file-header "#+LATEX_COMPILER: xelatex
  ,#+LATEX_CLASS: elegentpaper
  ,#+OPTIONS: prop:t\n\n")
  ;;; org-agenda
  (setq org-agenda-files (directory-files-recursively "~/org/" "\\.org$"))
  ; open with all title close
  (setq org-startup-folded t)
  (setq org-log-done 'time)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
)
#+end_src
** Storage
*** Directory
#+begin_src emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
(setq org-roam-directory "~/org/roam")
#+end_src
** Latex
#+begin_src emacs-lisp
(after! ox-latex
(setq org-latex-src-block-backend 'minted
      org-latex-pdf-process '("latexmk -xelatex -quiet -shell-escape -f %f"))
(add-to-list 'org-latex-logfiles-extensions "bbl")
(add-to-list 'org-latex-logfiles-extensions "tex")
(setq org-latex-remove-logfiles t) ;; ensure the cleanup
(add-to-list 'org-latex-packages-alist '("newfloat" "minted"))
(add-to-list 'org-latex-classes
             '("elegentpaper"
               "\\documentclass[lang=cn]{elegantpaper}
               [NO-DEFAULT-PACKAGES]
               [PACKAGES]
               [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
)
#+end_src
** For export
#+begin_src emacs-lisp
(setq org-export-preserve-breaks t)
#+end_src
* Key bindings
#+begin_src emacs-lisp
(map! :localleader
      :map org-mode-map
      :prefix "l"
      "p" #'org-paste-image-from-windows)
(map! :after company
      :map company-active-map
      "<tab>" #'company-complete-selection)
#+end_src
* Other
** WSL setup && Chinese input
+ 添加了粘贴图片的支持
+ 使用 rime 输入法，并且自动在特定情况下使用临时英文输入

#+begin_src emacs-lisp
(when (string-match-p "WSL" (shell-command-to-string "uname -a"))
  ;; use windows browser
  ;; note:
  ;; 1. this could make the org reveal.js generated html failed to find
  ;; picture, as our picture pasting is using a absolute path
  ;; 2. make sure to have a windows-browser in path
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "windows-browser")
  ;; use a better chinese input
  (setq default-input-method "rime")
  (setq rime-show-candidate 'posframe)
  (setq rime-user-data-dir "~/.doom.d/rime")
  ;; 在 evil-normal-state 中、在英文字母后面以及代码等情况下中自动使用英文
  (setq rime-disable-predicates
      '(rime-predicate-evil-mode-p
        rime-predicate-after-alphabet-char-p
        rime-predicate-punctuation-after-space-cc-p
        rime-predicate-space-after-cc-p
        rime-predicate-current-uppercase-letter-p
        rime-predicate-after-ascii-char-p
        rime-predicate-prog-in-code-p))

  ;; org paste image from windows host
  (setq org-startup-with-inline-images t)
  (defun org-paste-image-from-windows ()
    "Paste an image into a time stamped unique-named file in the ~/.org/picture
  and insert a link to this file"
    (interactive)
    (let* ((target-file
            (concat
             (make-temp-name
              (concat
               "~/.org/picture/"
               (format-time-string "%Y%m%d_%H%M%S_")))
             "\.png"))
           (windows-path
            (wsl-to-windows-path target-file))
           (ps-script
            (concat "(Get-Clipboard -Format image).Save('" windows-path "')")))
           (powershell ps-script)

           (if (file-exists-p target-file)
               (progn (insert (concat "[[" target-file "]]"))
                      (org-display-inline-images)
                      (message (concat "saving to " ps-script "..."))
                      )
             (user-error
              "Pasting the image failed.."))
           ))

  (defun wsl-to-windows-path (path)
    "Conver a wsl unix path to its windows path"
    (substring
     (shell-command-to-string (concat "wslpath -w " path)) 0 -1))

  (defun powershell (script)
    "Execute the given script within a powershell and return its return value.
  Note: pwsh should be a valid command that can start a powershell, for example,
  make a symblic link to powershell.exe to ~/.local/bin/powershell"
    (call-process "powershell" nil nil nil
                  "-noprofile"
                  "-Command" (concat "& {" script "}")))
)
#+end_src
** Profile startup
在一般情况下，注释下面的代码
#+begin_src emacs-lisp
;; profile startup, comment always!
;(require 'benchmark-init)
;(add-hook 'doom-first-input-hook #'benchmark-init/deactivate)
#+end_src
